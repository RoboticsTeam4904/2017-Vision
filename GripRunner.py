"""
Simple skeleton program for running an OpenCV pipeline generated by GRIP and using NetworkTables to send data.
Users need to:
1. Import the generated GRIP pipeline, which should be generated in the same directory as this file.
2. Set the network table server IP. This is usually the robots address (roborio-TEAM-frc.local) or localhost
3. Handle putting the generated code into NetworkTables
"""

import cv2
# from networktables import NetworkTable
from grip import GripPipeline  # TODO change the default module and class, if needed


sample = True
pi = False
if pi:
    import camera

def extra_processing(pipeline):
    """
    Performs extra processing on the pipeline's outputs and publishes data to NetworkTables.
    :param pipeline: the pipeline that just processed an image
    :return: None
    """
    targets = pipeline.out
    # self.out = []
    # for contour in self.filter_contours_output:
    #     x,y,w,h = cv2.boundingRect(contour)
    #     out.append((x,y))
    print targets

    # TODO: Users need to implement this.
    # Useful for converting OpenCV objects (e.g. contours) to something NetworkTables can understand.
    pass


def main():
    # NetworkTable.setTeam('4904')
    # NetworkTable.initialize()
    pipeline = GripPipeline()
    # cap = cv2.VideoCapture(0)
    if sample:
        image = cv2.imread("TapeTest.jpg")

    while True:
        if pi:
            image = camera.getImage()
        pipeline.process(image)  # TODO add extra parameters if the pipeline takes more than just a single image
        extra_processing(pipeline)


if __name__ == '__main__':
    main()
